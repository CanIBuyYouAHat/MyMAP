#!/usr/bin/env python3

from socket import *
from struct import *
import math
import netifaces
from netaddr import *
import json

def craft_arp(t_ip, my_ip, my_mac):
    target_mac = b'\xff\xff\xff\xff\xff\xff'
    sender_mac = my_mac
    target_ip = t_ip
    sender_ip = my_ip
    ethernet_header = target_mac
    ethernet_header += sender_mac
    ethernet_header += b'\x08\x06'
    
    arp_data = b'\x00\x01\x08\x00\x06\x04'
    arp_data += b'\x00\x01'
    arp_data += sender_mac 
    arp_data += sender_ip
    arp_data += target_mac
    arp_data += target_ip
    
    
    frame = ethernet_header + arp_data
    return frame

def encode_mac(octets_mac):
    ints_mac = [0] * 6

    for i in range(6):
        ints_mac[i] = int(octets_mac[i], 16)
    
    return pack(">BBBBBB", ints_mac[0], ints_mac[1], ints_mac[2], ints_mac[3], ints_mac[4], ints_mac[5])

def get_ips_in_range(mask):
    ips = []
    octets_mask = mask.split('.')
    cidr = 0
    for octet in octets_mask:
        cidr += math.log((256 - int(octet)), 2)
    
    ip = my_ip + '/' + str(32 - int(cidr))  
    print(f'Network in CIDR notation: {str(ip)}')
    for ip in IPNetwork(ip):
        octets = str(ip).split('.')
        ip_encoded = pack(">BBBB", int(octets[0]), int(octets[1]), int(octets[2]), int(octets[3]))
        ips.append(ip_encoded)
    
    return ips

# Main
ETH_P_ALL = 3
machines = {}   
interfaces = {}
for interface in netifaces.interfaces():
    print(f'All interfaces: {netifaces.interfaces()}')
    if interface != 'lo':
        print(f'Found interface {interface}')
        addrs = netifaces.ifaddresses(interface)
        # print(f'Printing interface information: {addrs}\n')
        netmask = addrs[netifaces.AF_INET][0]['netmask']
        my_ip = addrs[netifaces.AF_INET][0]['addr']
        my_mac = addrs[netifaces.AF_LINK][0]['addr']
        octets_ip = my_ip.split('.')
        octets_mac = my_mac.split(':')
    
        print(f'My IP is: {my_ip}\nMy MAC is: {my_mac}')
        print('Encoding IP...')
        my_ip_encoded = pack(">BBBB", int(octets_ip[0]), int(octets_ip[1]), int(octets_ip[2]), int(octets_ip[3]))
        print('Encoding MAC...')
        my_mac_encoded = encode_mac(octets_mac)
 
        print('Creating Socket...')
        with socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL)) as s:
            print('Binding...')
            s.bind(('eth0', 0))
            
            print('Finding all IPs in subnet...')
            ips = get_ips_in_range(netmask)
            
            discovered_ips = []
            # x = 0
            for ip in ips:
                # Testing purposes
                # if x == 50:
                #     break
                # else:
                #     x += 1
                print(f'Crafting arp discovery packet, sending to {".".join(str(i) for i in unpack(">4""B",ip))}...')
                s.send(craft_arp(ip, my_ip_encoded, my_mac_encoded))
                s.settimeout(0.05)
                try:
                    data = s.recv(42)
                except timeout:
                    continue
                
                if data[:6] == my_mac_encoded:
                    print("Received:", repr(data))
                    frame = unpack(">42B", data)
                    discovered_mac = ":".join(str(hex(i)) for i in frame[22:28])
                    discovered_ip = ".".join(str(i) for i in frame[28:32])
                    print(f'Found IP {discovered_ip} with MAC {discovered_mac}!')
                    discovered_ips.append((discovered_ip, discovered_mac))
                
            
                # common_ports = [7, 21, 22, 23, 80]
            services = {}
            
            for ip in discovered_ips:
                for i in range(65536):
                    port = i
                    # Testing purposes
                    # if i == 100:
                    #     break
                    with socket(AF_INET, SOCK_STREAM) as sock:
                        sock.settimeout(0.05)
                        services[ip[0]] = []
                        print(f'Attempting connection to {str(ip[0])}:{port}')
                        try:
                            sock.connect((ip[0], port))
                        except timeout:
                            continue
                        except ConnectionError:
                            continue
                        if port == 22:
                            response = sock.recv(1024)
                            if b"SSH" in response:
                                services[ip[0]].append((port, 'SSH'))
                        elif port == 21:
                            response = sock.recv(1024)
                            if b"220" in response:
                                services[ip[0]].append((port,'FTP'))
                        elif port == 7:
                            test_message = b"echo test"
                            sock.sendall(test_message)
                            response = sock.recv(1024)
                            if response == test_message:
                                services[ip[0]].append((port,'echo'))
                        elif port == 23:
                            sock.sendall(b"\r\n")
                            response = sock.recv(1024)
                            if response:
                                services[ip[0]].append((port,'telnet'))
                        else:
                            services[ip[0]].append((port, 'other'))
                ip_json = {}
            
            for ip in discovered_ips:
                mac_json = {}
                mac_json['mac'] = ip[1]
                mac_json['tcp'] =  services[ip[0]]
                ip_json[ip[0]] = mac_json
            interfaces[interface] = ip_json
machines['machines'] = interfaces
json_object = json.dumps(machines, indent=4)
with open("results.json", "w") as output:
    output.write(json_object)  

        
            
        
            